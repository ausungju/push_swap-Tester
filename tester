#!/bin/python3

import subprocess as sp
import numpy as np
import os

def check_num_range(big_num, samll_num, limit_cmd) :
	new_line = '\n'
	num_list = []
	num_set = np.array(range(big_num, samll_num - 1, -1))
	num_list.append(' '.join(map(str, num_set)))
	for i in range(9) :
		num_list.append(' '.join(map(str, np.random.permutation(num_set))))

	print("\t./push_swap <5 random values>")
	print('\t\t', end="")
	for i in range(len(num_list)) :
		r = sp.run(args=["./push_swap", num_list[i]], capture_output=True, text=True)
		ps = sp.Popen("./push_swap 2 1 0 | ./checker_linux 2 1 0",shell=True,stdout=sp.PIPE,stderr=sp.STDOUT).communicate()[0].decode("utf-8")
		if i % 4 == 0 and i != 0:
			print("\n\t\t", end="")
		if r.returncode != 0 :
			print(f"{i+1}." + "\033[31m" + f"KO: error" + "\033[0m", end="  ")
		elif r.stdout.count(new_line) <= limit_cmd and ps == "OK\n":
			print(f"{i+1}." + "\033[32m" + "OK" + "\033[0m", end="  ")
		elif ps == "KO\n" :
			print(f"{i+1}." + "\033[31m" + f"KO:not sorted" + "\033[0m", end="  ")
		else :
			print(f"{i+1}." + "\033[31m" + f"KO: {r.stdout.count(new_line)}" + "\033[0m", end="  ")
		if (i + 1 == len(num_list)) :
			print("" + check_leck(' '.join(map(str, num_set))))
	print("\n")



def check_leck(num_list) :
	r = sp.run(args=["valgrind", "--leak-check=full", "./push_swap", num_list], capture_output=True, text=True)
	lines = r.stderr.split('\n')
	search_free = [line for line in lines if "total heap usage:" in line][0]
	search_error = [line for line in lines if "ERROR SUMMARY:" in line][0]
	if (search_free.split("total heap usage: ")[1].split(" allocs")[0] == search_free.split("allocs, ")[1].split(" frees")[0] and 
	 search_error.split("ERROR SUMMARY: ")[1].split(" errors")[0] == "0"):
		return ("\033[32m" + "\tleak_OK" + "\033[0m")
	else :
		return ("\033[31m" + "\tleak_KO" + "\033[0m")
	

os.system('clear')
print("/* ******************************************************************************* */")
print("/*                                                                                 */")
print("/*                                                             :::      ::::::::   */")
print("/*   push_swap_tester                                        :+:      :+:    :+:   */")
print("/*                                                         +:+ +:+         +:+     */")
print("/*   By: seongkim                                        +#+  +:+       +#+        */")
print("/*                                                     +#+#+#+#+#+   +#+           */")
print("/*   Created: 2024/06/28 by seongkim                        #+#    #+#             */")
print("/*   Updated: 2024/07/01 by seongkim                       ###   ########.fr       */")
print("/*                                                                                 */")
print("/* ******************************************************************************* */")
print("")

out = sp.run(args=["norminette"], capture_output=True, text=True).stdout
print("norminette :", end=" ")
if ": Error!" in out :
	print("\033[31m" + "\tKO" + "\033[0m", end="\n\n")
else :
	print("\033[32m" + "\tOK" + "\033[0m", end="\n\n")

out = sp.run(args=["make", "re"], capture_output=True, text=True)
print("MAKE : ", end="")
if (out.stderr != "") :
	print(out.stderr)
	print("\033[31m" + "\tFAIL\n" + "\033[0m")
	exit()
else :
	print("\033[32m" + "\tsuccess" + "\033[0m", end="\n\n")

files = os.listdir("./")
if ("push_swap" not in files or "checker_linux" not in files) :
	if ("push_swap" not in files) :
		print("not found \"push_swap\"\n")
	if ("checker_linux" not in files) :
		print("not found \"checker_linux\"\n")
	exit()
os.system("chmod 777 checker_linux")

print("\033[1m1.Error management\033[0m")
r = sp.run(args=["./push_swap", "a 1"], capture_output=True, text=True)
check_leck("a 1")
print("\t./push_swap <Non-numeric arguments>", end="")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "a", "1"], capture_output=True, text=True)
check_leck("a 1")
print("\t\t\t\t\t", end="")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0 0"], capture_output=True, text=True)
print("\t./push_swap <Duplicate numbers>", end="\t")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0", "0"], capture_output=True, text=True)
print("\t\t\t\t\t", end="")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "-2147483649 2147483648"], capture_output=True, text=True)
print("\t./push_swap <int range exceeded>", end="")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "-2147483649", "2147483648"], capture_output=True, text=True)
print("\t\t\t\t\t", end="")
if "ERROR" == r.stderr.upper()  or "ERROR" == r.stdout.upper():
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + "\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap"], capture_output=True, text=True)
print("\t./push_swap <Empty arguments>", end="\t")
if r.stderr == "" and r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	print("\033[31m" + f"\tKO" + "\033[0m", end="")
print(check_leck("a 1"))

print("\033[1m2.Identity test & Simple version\033[0m")
r = sp.run(args=["./push_swap", "42"], capture_output=True, text=True)
print("\t./push_swap 42", end="\t\t\t")
if r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0 1 2 3"], capture_output=True, text=True)
print("\t./push_swap \"0 1 2 3\"", end="\t\t")
if r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0", "1", "2", "3"], capture_output=True, text=True)
print("\t\t\t\t\t", end="")
if r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0 1 2 3 4 5 6 7 8 9"], capture_output=True, text=True)
print("\t./push_swap \"0 1 2 3 4 5 6 7 8 9\"", end="")
if r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], capture_output=True, text=True)
print("\t\t\t\t\t", end="")
if r.stdout == "" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "2 1 0"], capture_output=True, text=True)
ps = sp.Popen("./push_swap 2 1 0 | ./checker_linux 2 1 0",shell=True,stdout=sp.PIPE,stderr=sp.STDOUT).communicate()[0].decode("utf-8")
print("\t./push_swap \"2 1 0\"", end="\t\t")
if (r.stdout.count('\n') == 2 or r.stdout.count('\n') == 3) and ps == "OK\n" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
elif ps == "KO\n" :
	print("\033[31m" + f"\tKO : not_sorted" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "2", "1", "0"], capture_output=True, text=True)
ps = sp.Popen("./push_swap 2 1 0 | ./checker_linux 2 1 0",shell=True,stdout=sp.PIPE,stderr=sp.STDOUT).communicate()[0].decode("utf-8")
print("\t\t\t\t\t", end="")
if (r.stdout.count('\n') == 2 or r.stdout.count('\n') == 3) and ps == "OK\n" :
	print("\033[32m" + "\tOK" + "\033[0m", end="")
elif ps == "KO\n" :
	print("\033[31m" + f"\tKO : not_sorted" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "1 5 2 4 3"], capture_output=True, text=True)
ps = sp.Popen("./push_swap \"1 5 2 4 3\" | ./checker_linux \"1 5 2 4 3\"",shell=True,stdout=sp.PIPE,stderr=sp.STDOUT).communicate()[0].decode("utf-8")
print("\t./push_swap \"1 5 2 4 3\"", end="\t\t")
if r.stdout.count('\n') < 12 and ps == "OK\n":
	print("\033[32m" + "\tOK" + "\033[0m", end="")
elif ps == "KO\n" :
	print("\033[31m" + f"\tKO : not_sorted" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

r = sp.run(args=["./push_swap", "1", "5", "2", "4", "3"], capture_output=True, text=True)
ps = sp.Popen("./push_swap 1 5 2 4 3 | ./checker_linux 1 5 2 4 3",shell=True,stdout=sp.PIPE,stderr=sp.STDOUT).communicate()[0].decode("utf-8")
print("\t\t\t\t\t", end="")
if r.stdout.count('\n') < 12 and ps == "OK\n":
	print("\033[32m" + "\tOK" + "\033[0m", end="")
elif ps == "KO\n" :
	print("\033[31m" + f"\tKO : not_sorted" + "\033[0m", end="")
else :
	put = r.stdout.count('\n')
	print("\033[31m" + f"\tKO : {put}" + "\033[0m", end="")
print(check_leck("a 1"))

check_num_range(5, 1, 12)

print("\033[1m3.Middle version\033[0m")
check_num_range(100, 1, 700)

print("\033[1m4.Advanced version\033[0m")
check_num_range(500, 1, 5500)
